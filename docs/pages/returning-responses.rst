Returning responses
===================

Describing response
-------------------

We have two general modes of working with responses:

1. Returning real :class:`~django.http.HttpResponse` instances
   with granual configuration from "real endpoints"
2. Returning just raw data from "raw endpoints"

Real endpoints
~~~~~~~~~~~~~~

.. note::

  No response spec is generated by default for "real endpoints".

"Real endpoints" can use :func:`~django_modern_rest.endpoint.validate`
decorator, :attr:`~django_modern_rest.controller.Controller.responses`
``Controller`` attribute, or :data:`~django_modern_rest.settings.responses`
global setting to specify all possible responses.

To do that we utilize :class:`~django_modern_rest.response.ResponseSpec`:

.. literalinclude:: /examples/returning_responses/validate.py
  :caption: views.py
  :linenos:
  :lines: 16-
  :emphasize-lines: 11-14

Raw endpoints
~~~~~~~~~~~~~

.. note::

  "Raw endpoints" always have a response spec generated by default.

"Raw endpoints" can be either undecorated
or can use :func:`~django_modern_rest.endpoint.modify` decoratator
to modify the response spec that will be **generated by default**.

.. literalinclude:: /examples/returning_responses/modify.py
  :caption: views.py
  :linenos:
  :lines: 10-
  :emphasize-lines: 10

Other response specs can be specified via
``extra_responses`` param to :func:`~django_modern_rest.endpoint.modify`,
:attr:`~django_modern_rest.controller.Controller.responses`
``Controller`` attribute, or :data:`~django_modern_rest.settings.responses`
global setting.

Make sure that all responses that can be returned are described!

.. important::

  Despite the fact, that ``django-modern-rest`` does not have
  its own request and response primitives
  and uses :class:`~django.http.HttpRequest`
  and :class:`~django.http.HttpResponse`,
  users must not return Django responses directly.

  Instead, use any of the public APIs:

  - :meth:`~django_modern_rest.controller.Controller.to_response`
  - :meth:`~django_modern_rest.controller.Controller.to_error`
  - :exc:`~django_modern_rest.response.APIError`

  In case when you don't have a controller / endpoint instance
  (like in a middleware, for example),
  you can fallback to using :func:`~django_modern_rest.response.build_response`
  lower level primitive.

  Why?

  1. You can mess up the default headers / status codes
  2. You won't have the right json serializer / deserializer,
     which can be both slow and error-prone


Describing headers
------------------

You also must specify which headers are returned (if any).

When using "real endpoints", you can provide ``headers`` parameter
to :class:`~django_modern_rest.response.ResponseSpec`
if there are headers you want to describe.
:class:`~django_modern_rest.headers.HeaderSpec` is here to help.
You can create both ``required=True``
(always must be present on the response object)
and ``required=False`` headers (might be missing in some cases):

.. literalinclude:: /examples/returning_responses/validate_headers.py
  :caption: views.py
  :linenos:
  :lines: 18-
  :emphasize-lines: 14-17

.. note::

  All headers from the response objects are checked. We will report:

  - Required headers that exist in the spec, but not on the ``response``
  - Any headers that exist on the ``response``, but not present in the spec

  ``Content-Type`` header is the only one that is always added automatically.

With "raw endpoints" you can also use
:class:`~django_modern_rest.headers.NewHeader` marker which can set headers
with known values to the final response.

.. literalinclude:: /examples/returning_responses/modify_headers.py
  :caption: views.py
  :linenos:
  :lines: 10-
  :emphasize-lines: 13

If you need headers with not static, but dynamic values, use "real endpoints"
and pass ``headers`` dict to
:meth:`~django_modern_rest.controller.Controller.to_response` method.


.. _response_validation:

Response validation
-------------------

By default, all responses are validated at runtime to match the schema.
This allows us to be super strict about schema generation as a pro,
but as a con, it is slower than can possibly be.

You can disable response validation via configuration:

.. warning::

  Disabling response validation makes sense only
  in production for better performance.

  It is not recommended to disable response validation for any other reason.
  Instead, fix your schema errors!

.. tabs::

    .. tab:: Active validation

      .. literalinclude:: /examples/returning_responses/active_validation.py
        :caption: views.py
        :linenos:
        :emphasize-lines: 26-27

    .. tab:: Disable per endpoint

      .. literalinclude:: /examples/returning_responses/per_endpoint.py
        :caption: views.py
        :linenos:
        :emphasize-lines: 6, 24

    .. tab:: Disable per blueprint

      .. literalinclude:: /examples/returning_responses/per_blueprint.py
        :caption: views.py
        :linenos:
        :emphasize-lines: 6, 24

    .. tab:: Disable per controller

      .. literalinclude:: /examples/returning_responses/per_controller.py
        :caption: views.py
        :linenos:
        :emphasize-lines: 24-25

    .. tab:: Disable globally

      .. code-block:: python
        :caption: settings.py

        >>> DMR_SETTINGS = {'validate_responses': False}

    .. tab:: :octicon:`checklist` The right way

      .. literalinclude:: /examples/returning_responses/right_way.py
        :caption: views.py
        :linenos:
        :emphasize-lines: 11-12, 31-38
